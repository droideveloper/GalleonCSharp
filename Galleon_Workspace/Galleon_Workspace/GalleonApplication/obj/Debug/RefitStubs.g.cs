﻿using System;
using System.Net.Http;
using System.Collections.Generic;
using System.Linq;
using Refit;
using System.Text;
using System.Reactive.Linq;
using System.Threading.Tasks;
using GalleonApplication.Extra;
using System.IO;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

namespace RefitInternalGenerated
{
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {
#pragma warning disable 0649
        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
#pragma warning restore 0649
    }
}

namespace GalleonApplication.Extra.Net
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedIEndpointClient : IEndpointClient
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIEndpointClient(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual IObservable<HttpResponseMessage> version()
        {
            var arguments = new object[] {  };
            return (IObservable<HttpResponseMessage>) methodImpls["version"](Client, arguments);
        }

        public virtual IObservable<HttpResponseMessage> tryLogin(LoginEntity creditentials)
        {
            var arguments = new object[] { creditentials };
            return (IObservable<HttpResponseMessage>) methodImpls["tryLogin"](Client, arguments);
        }

        public virtual IObservable<HttpResponseMessage> queryDirectory(int id)
        {
            var arguments = new object[] { id };
            return (IObservable<HttpResponseMessage>) methodImpls["queryDirectory"](Client, arguments);
        }

        public virtual IObservable<HttpResponseMessage> queryDocument(int id)
        {
            var arguments = new object[] { id };
            return (IObservable<HttpResponseMessage>) methodImpls["queryDocument"](Client, arguments);
        }

        public virtual IObservable<HttpResponseMessage> queryCountries()
        {
            var arguments = new object[] {  };
            return (IObservable<HttpResponseMessage>) methodImpls["queryCountries"](Client, arguments);
        }

        public virtual IObservable<HttpResponseMessage> queryCities(int id)
        {
            var arguments = new object[] { id };
            return (IObservable<HttpResponseMessage>) methodImpls["queryCities"](Client, arguments);
        }

        public virtual IObservable<HttpResponseMessage> queryCategories()
        {
            var arguments = new object[] {  };
            return (IObservable<HttpResponseMessage>) methodImpls["queryCategories"](Client, arguments);
        }

        public virtual IObservable<HttpResponseMessage> queryCustomers(string query)
        {
            var arguments = new object[] { query };
            return (IObservable<HttpResponseMessage>) methodImpls["queryCustomers"](Client, arguments);
        }

        public virtual IObservable<HttpResponseMessage> queryDocumentsByDirectoryID(int id)
        {
            var arguments = new object[] { id };
            return (IObservable<HttpResponseMessage>) methodImpls["queryDocumentsByDirectoryID"](Client, arguments);
        }

        public virtual IObservable<HttpResponseMessage> createCustomer(CustomerEntity customer)
        {
            var arguments = new object[] { customer };
            return (IObservable<HttpResponseMessage>) methodImpls["createCustomer"](Client, arguments);
        }

        public virtual IObservable<HttpResponseMessage> createContact(ContactEntity contact)
        {
            var arguments = new object[] { contact };
            return (IObservable<HttpResponseMessage>) methodImpls["createContact"](Client, arguments);
        }

        public virtual IObservable<HttpResponseMessage> createContacts(List<ContactEntity> contacts)
        {
            var arguments = new object[] { contacts };
            return (IObservable<HttpResponseMessage>) methodImpls["createContacts"](Client, arguments);
        }

        public virtual IObservable<HttpResponseMessage> createDirectory(DirectoryEntity directory)
        {
            var arguments = new object[] { directory };
            return (IObservable<HttpResponseMessage>) methodImpls["createDirectory"](Client, arguments);
        }

        public virtual IObservable<HttpResponseMessage> createDocuments(List<DocumentEntity> documents)
        {
            var arguments = new object[] { documents };
            return (IObservable<HttpResponseMessage>) methodImpls["createDocuments"](Client, arguments);
        }

        public virtual IObservable<HttpResponseMessage> updateDocument(DocumentEntity document)
        {
            var arguments = new object[] { document };
            return (IObservable<HttpResponseMessage>) methodImpls["updateDocument"](Client, arguments);
        }

        public virtual IObservable<HttpResponseMessage> tryKeepAlive(string token)
        {
            var arguments = new object[] { token };
            return (IObservable<HttpResponseMessage>) methodImpls["tryKeepAlive"](Client, arguments);
        }

    }
}

namespace GalleonApplication.Extra.Net
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedIFileClient : IFileClient
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIFileClient(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual IObservable<HttpResponseMessage> downloadContent(int id)
        {
            var arguments = new object[] { id };
            return (IObservable<HttpResponseMessage>) methodImpls["downloadContent"](Client, arguments);
        }

        public virtual IObservable<HttpResponseMessage> createContent(int id,Stream file)
        {
            var arguments = new object[] { id,file };
            return (IObservable<HttpResponseMessage>) methodImpls["createContent"](Client, arguments);
        }

        public virtual IObservable<HttpResponseMessage> updateContent(int id,Stream file)
        {
            var arguments = new object[] { id,file };
            return (IObservable<HttpResponseMessage>) methodImpls["updateContent"](Client, arguments);
        }

        public virtual IObservable<HttpResponseMessage> deleteContent(int id)
        {
            var arguments = new object[] { id };
            return (IObservable<HttpResponseMessage>) methodImpls["deleteContent"](Client, arguments);
        }

    }
}
